@Library("jenkins-shared-library") _


    // parameters {
    //     choice(
    //         name: 'Module_Names',
    //         description: 'Modules to Deploy',
    //         type: 'PT_CHECKBOX',
    //         multiSelectDelimiter: ',',
    //         value: 'grc,issue,risk,controltesting,businessresilience,survey,admin,engine,attendance,documentmanagment,employee,incident,keyshield,leave,monitor,project,resolve,syscare,vendor,internalaudit,loss,crm,za'    
    //     )
    //     // choice(
    //     //     name: 'Environment',
    //     //     choices: ['dev', 'qa', 'staging'],
    //     //     description: 'Specify the environment: dev, qa, or staging'
    //     // )  
    // }

     // Define the method outside of the pipeline block
    def getAgentLabel(environment) {
    switch (environment.toLowerCase()) {
        case 'agent-container-stagging':
            return 'JENKINS-AGENT'
        case 'testing-container-qa':
            return 'JENKINS-AGENT-SSH'
        case 'testing-dev':
            return 'TESTING-DEV'
        case 'testing-qa':
            return 'TESTING-QA'            
        default:
            error("Invalid environment specified: ${environment}")
    }
}

pipeline {

  parameters {
    choice(name: 'Customer', choices: ['Progrec-APPS', 'AEON-Credit'], description: 'Select the target customer')
    string(name: 'Build_Version', defaultValue: 'Latest', description: 'Specify the version to build')
    // choice( //make this env reactive since env is not same for both progrec app & other customer
    //     name: 'Environment',
    //     choices: ['Agent-Container-Stagging', 'Testing-Container-QA', 'Redhat-VM', 'Dev', 'PreSales', 'Sales'],
    //     description: 'Specify the environment: dev, qa, or staging'
    // )

}

     agent {
        label getAgentLabel(params.Environment)
    }

    options {
        // Set the custom checkout directory
        skipDefaultCheckout(true)
    }

    stages {

        stage('Assign_Env') {
            steps {
                script {

                    switch (params.Customer) {
                        case 'Progrec-APPS':
                            switch (params.Environment) {
                                case 'Agent-Container-Stagging':
                                    Nexus_repo_env = "Stagging"
                                    break
                                case 'Testing-Container-QA':
                                    Nexus_repo_env = "QA"
                                    break
                                case 'Testing-Dev':
                                    Nexus_repo_env = "Testing-Dev"
                                    break
                                case 'Testing-QA':
                                    Nexus_repo_env = "Testing-QA"
                                    break        
                                default:
                                    error "Unsupported Environment for Progrec-APPS: ${params.Environment}"
                            }
                            break
                        case 'AEON-Credit':
                             switch (params.Environment) {
                                case 'Agent-Container-Stagging':
                                    Nexus_repo_env = "Stagging"
                                    break
                                case 'Testing-Container-QA':
                                    Nexus_repo_env = "QA"
                                    break
                                case 'Testing-Dev':
                                    Nexus_repo_env = "Dev"
                                    break
                                case 'Testing-QA':
                                    Nexus_repo_env = "QA"
                                    break
                                default:
                                    error "Unsupported Environment for AEON-Credit: ${params.Environment}"
                            }
                            break
                        default:
                            error "Unsupported Customer: ${params.Customer}"
                    }
                    echo "Assigned Nexus_repo_env: ${Nexus_repo_env}"
                }
            }
        }

        
stage('Check_if_package_exists_Nexus') {
    steps {
        script {
            withCredentials([usernamePassword(credentialsId: 'Nexus', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                def modules = params.Module_Names.split(',')
                modules.each { module ->
                    module = module.trim()
                    echo "Processing module: ${module}"

                    if (module) {
                        sh """
                            #!/bin/bash
                            NEXUS_URL="https://rndnexus.progrec.com"
                            REPO="Module-Objects"

                            if [ "${params.Build_Version}" = "Latest" ]; then
                                echo "Build_Version is set to 'Latest'. Nexus package existence check."
                                echo "${module}"

                                echo "Fetching all versions for module: ${module}"
                                RESPONSE=\$(curl -s -u \${USERNAME}:\${PASSWORD} \\
                                    "\${NEXUS_URL}/service/rest/v1/search/assets?repository=\${REPO}&q=${params.Customer}/${Nexus_repo_env}/${module}" )
                                
                                
                                VERSIONS=\$(echo "\$RESPONSE" | jq -r '.items[].path' | grep "${params.Customer}/${Nexus_repo_env}/${module}/" | grep '\\.zip\$' | awk -F'/' '{print \$NF}' | sort -V)
                                
                                
                                LATEST_ZIP=\$(echo "\$VERSIONS" | tail -1)
                                echo "Latest zip: \$LATEST_ZIP"

                                if [ -n "\$LATEST_ZIP" ]; then
                                    echo "Latest .zip file for module ${module}: \$LATEST_ZIP"
                                else
                                    echo "No .zip files found for module ${module}."
                                    exit 1
                                fi
                                
                                # Extracting the version
                                LATEST_VERSION=\$(echo "\$LATEST_ZIP" | sed -E 's/.*-([0-9.]+)\\.zip/\\1/')
                                echo "Extracted version: \$LATEST_VERSION"
                                
                            else
                                PACKAGE_NAME="${params.Customer}/${Nexus_repo_env}/${module}/${params.Build_Version}/${module}-${params.Build_Version}.zip"
                                echo "\$PACKAGE_NAME"
                                
                                EXISTING_PACKAGE=\$(curl -s -u \$USERNAME:\$PASSWORD \\
                                    "\$NEXUS_URL/service/rest/v1/search/assets?repository=\$REPO&q=\$PACKAGE_NAME" | \\
                                    jq '.items[] | select(.path | contains("'"\$PACKAGE_NAME"'"))')
                                
                                if [ -n "\$EXISTING_PACKAGE" ]; then
                                    echo "Package \$PACKAGE_NAME exists in Nexus. Continue Download the package."
                                    exit 0
                                else
                                    echo "Package \$PACKAGE_NAME does not exist."
                                    echo "Exact package does not exist in Nexus.please recheck the input or nexus repository"
                                    exit 1
                                fi
                            fi
                        """

                    }
                }
            }
        }
    }
}


        

        stage('Nexus_Download') {
            steps {
                script {
                       sh """
                            #!/bin/bash
                            # Define the destination directory
                            destinationDir="/HRMS/exportFiles" #stadnard path
                            # destinationDir="/home/master/Progrec/exportFiles"

                            # Check if the destination directory exists
                            if [ -d "\$destinationDir" ]; then
                                echo "Directory exists. Replacing existing modules in target isntance with the new module package \$destinationDir..."
                                
                                # Remove all files and folders except deploymentscripts.zip
                               #find "\$destinationDir" -mindepth 1 ! -name 'deploymentscripts.zip' -exec rm -rf {} +
                                ls
                            else
                                echo "Directory does not exist. Creating the directory..."
                                mkdir -p "\$destinationDir"
                            fi
                        """
                    def modules = params.Module_Names.split(',')
                    modules.each { module ->
                        // Trim whitespace from module name
                        module = module.trim()
                        echo "Processing module: ${module}"

                        // Check if the module is not empty
                        if (module) {
                        sh """
                        #!/bin/bash
                            NEXUS_URL="https://rndnexus.progrec.com"
                            REPO="Module-Objects"

                            # Define the destination directory
                            destinationDir="/HRMS/exportFiles" #stadnard path
                            # destinationDir="/home/master/Progrec/exportFiles"

                            if [ "${params.Build_Version}" = "Latest" ]; then
                                echo "Build_Version is set to 'Latest'. Nexus package existence check."
                                echo "${module}"

                                echo "Fetching all versions for module: ${module}"
                                RESPONSE=\$(curl -s -u \${USERNAME}:\${PASSWORD} \\
                                    "\${NEXUS_URL}/service/rest/v1/search/assets?repository=\${REPO}&q=${params.Customer}/${Nexus_repo_env}/${module}" )
                                
                                
                                VERSIONS=\$(echo "\$RESPONSE" | jq -r '.items[].path' | grep "${params.Customer}/${Nexus_repo_env}/${module}/" | grep '\\.zip\$' | awk -F'/' '{print \$NF}' | sort -V)
                                
                                
                                LATEST_ZIP=\$(echo "\$VERSIONS" | tail -1)
                                echo "Latest zip: \$LATEST_ZIP"

                                if [ -n "\$LATEST_ZIP" ]; then
                                    echo "Latest .zip file for module ${module}: \$LATEST_ZIP"
                                else
                                    echo "No .zip files found for module ${module}."
                                    exit 1
                                fi
                                
                                # Extracting the version
                                LATEST_VERSION=\$(echo "\$LATEST_ZIP" | sed -E 's/.*-([0-9.]+)\\.zip/\\1/')
                                echo "Extracted version: \$LATEST_VERSION"

                                #Delete existing modules fromthe export fodler in target location
                                rm -rf \${destinationDir}/${module}-*.zip

                                # Define the Nexus repository URL and structure
                                nexusUrl="https://rndnexus.progrec.com/repository/Module-Objects/${params.Customer}/${Nexus_repo_env}"
                                fileUrl="\$nexusUrl/${module}/\$LATEST_VERSION/${module}-\$LATEST_VERSION.zip"

                                # Define the destination path for the downloaded file
                                destinationPath="\$destinationDir/${module}-\$LATEST_VERSION.zip"

                                # Download the file using curl
                                echo "Downloading \$fileUrl..."
                                curl -o "\$destinationPath" "\$fileUrl"

                                # Check if the download was successful
                                if [ -f "\$destinationPath" ]; then
                                    echo "File downloaded successfully to \$destinationPath"
                                else
                                    echo "Failed to download the file. Please check the module name and version."
                                fi

                        else 
                            #Delete existing modules fromthe export fodler in target location
                                rm -rf \${destinationDir}/${module}-*.zip

                                # Define the Nexus repository URL and structure
                                nexusUrl="https://rndnexus.progrec.com/repository/Module-Objects/${params.Customer}/${Nexus_repo_env}"
                                fileUrl="\$nexusUrl/${module}/${Build_Version}/${module}-\$Build_Version.zip"

                                # Define the destination path for the downloaded file
                                destinationPath="\$destinationDir/${module}-\$Build_Version.zip"

                                # Download the file using curl
                                echo "Downloading \$fileUrl..."
                                curl -o "\$destinationPath" "\$fileUrl"

                                # Check if the download was successful
                                if [ -f "\$destinationPath" ]; then
                                    echo "File downloaded successfully to \$destinationPath"
                                else
                                    echo "Failed to download the file. Please check the module name and version."
                                fi
                                fi
                                """
                        }
                    }
                }
            }
        }

    }
}

// @Library("jenkins-shared-library") _

// // Define the method outside of the pipeline block
// def getAgentLabel(environment) {
//     switch (environment.toLowerCase()) {
//         case 'agent-container-stagging':
//             return 'JENKINS-AGENT'
//         case 'testing-container-qa':
//             return 'JENKINS-AGENT-SSH'
//         case 'testing-dev':
//             return 'TESTING-DEV'
//         case 'testing-qa':
//             return 'TESTING-QA'            
//         default:
//             error("Invalid environment specified: ${environment}")
//     }
// }

// pipeline {
//     agent {
//         // Dynamically select the agent based on the environment
//         label getAgentLabel(params.Environment ?: 'default-environment') // Ensure params.Environment is available
//     }

//     parameters {
//         choice(
//             name: 'Customer',
//             choices: ['Progrec-APPS', 'AEON-Credit'],
//             description: 'Select the target customer'
//         )
//  activeChoice(
//         name: 'Module_Names',
//         description: 'Select the module names based on the customer',
//         script: [
//             $class: 'GroovyScript',
//             script: [
//                 classpath: [],
//                 sandbox: true,
//                 script: '''
//                     if (Customer == "Progrec-APPS") {
//                         return [
//                             'grc', 
//                             'issue', 
//                             'risk', 
//                             'controltesting', 
//                             'businessresilience',
//                             'survey',
//                             'engine',
//                             'admin',
//                             'attendance',
//                             'incident',
//                             'monitor',
//                             'project',
//                             'documentmanagment',
//                             'employee',
//                             'keyshield',
//                             'leave',
//                             'resolve',
//                             'syscare',
//                             'vendor',
//                             'internalaudit',
//                             'loss',
//                             'crm',
//                             'za'
//                         ]
//                     } else if (Customer == "AEON-Credit") {
//                         return [
//                             'admin', 
//                             'engine', 
//                             'vendor'
//                         ]
//                     } else {
//                         return ['No Modules Available']
//                     }
//                 '''
//             ]
//         ]
//     )
//         string(
//             name: 'Build_Version',
//             defaultValue: '1.0',
//             description: 'Specify the version to build'
//         )
//         choice(
//             name: 'Environment',
//             choices: ['Agent-Container-Stagging', 'Testing-Container-QA', 'Testing-Dev', 'Testing-QA'],
//             description: 'Select the deployment environment'
//         )
//     }

//     options {
//         skipDefaultCheckout(true)
//     }

//     stages {
//         stage('Display Parameters') {
//             steps {
//                 script {
//                     echo "Selected Customer: ${params.Customer}"
//                     echo "Selected Modules: ${params.Module_Names}"
//                     echo "Build Version: ${params.Build_Version}"
//                     echo "Selected Environment: ${params.Environment}"
//                 }
//             }
//         }

//         // stage('Assign Nexus Repo Environment') {
//         //     steps {
//         //         script {
//         //             def Nexus_repo_env = ''
//         //             switch (params.Customer) {
//         //                 case 'Progrec-APPS':
//         //                     switch (params.Environment) {
//         //                         case 'Agent-Container-Stagging':
//         //                             Nexus_repo_env = "Stagging"
//         //                             break
//         //                         case 'Testing-Container-QA':
//         //                             Nexus_repo_env = "QA"
//         //                             break
//         //                         case 'Testing-Dev':
//         //                             Nexus_repo_env = "Testing-Dev"
//         //                             break
//         //                         case 'Testing-QA':
//         //                             Nexus_repo_env = "Testing-QA"
//         //                             break        
//         //                         default:
//         //                             error "Unsupported Environment for Progrec-APPS: ${params.Environment}"
//         //                     }
//         //                     break
//         //                 case 'AEON-Credit':
//         //                     switch (params.Environment) {
//         //                         case 'Agent-Container-Stagging':
//         //                             Nexus_repo_env = "Stagging"
//         //                             break
//         //                         case 'Testing-Container-QA':
//         //                             Nexus_repo_env = "QA"
//         //                             break
//         //                         case 'Testing-Dev':
//         //                             Nexus_repo_env = "Dev"
//         //                             break
//         //                         case 'Testing-QA':
//         //                             Nexus_repo_env = "QA"
//         //                             break
//         //                         default:
//         //                             error "Unsupported Environment for AEON-Credit: ${params.Environment}"
//         //                     }
//         //                     break
//         //                 default:
//         //                     error "Unsupported Customer: ${params.Customer}"
//         //             }
//         //             echo "Assigned Nexus Repo Environment: ${Nexus_repo_env}"
//         //         }
//         //     }
//         // }

//         // stage('Check if Package Exists in Nexus') {
//         //     steps {
//         //         script {
//         //             withCredentials([usernamePassword(credentialsId: 'Nexus', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
//         //                 def modules = params.Module_Names.split(',')
//         //                 modules.each { module ->
//         //                     module = module.trim()
//         //                     echo "Processing module: ${module}"

//         //                     if (module) {
//         //                         sh """
//         //                             #!/bin/bash
//         //                             set +x
//         //                             NEXUS_URL="https://rndnexus.progrec.com"
//         //                             REPO="Module-Objects"
//         //                             PACKAGE_NAME="${params.Customer}/${Nexus_repo_env}/${module}/${params.Build_Version}/${module}-${params.Build_Version}.zip"
//         //                             echo "Checking package: \$PACKAGE_NAME"
                                    
//         //                             EXISTING_PACKAGE=\$(curl -s -u \$USERNAME:\$PASSWORD \\
//         //                                 "\$NEXUS_URL/service/rest/v1/search/assets?repository=\$REPO&q=\$PACKAGE_NAME" | \\
//         //                                 jq '.items[] | select(.path | contains("'"\$PACKAGE_NAME"'"))')
                                    
//         //                             if [ -n "\$EXISTING_PACKAGE" ]; then
//         //                                 echo "Package \$PACKAGE_NAME exists in Nexus. Continue to download."
//         //                             else
//         //                                 echo "Package \$PACKAGE_NAME does not exist."
//         //                                 exit 1
//         //                             fi
//         //                         """
//         //                     } else {
//         //                         echo "Module name is empty, skipping."
//         //                     }
//         //                 }
//         //             }
//         //         }
//         //     }
//         // }

//         // stage('Download Packages from Nexus') {
//         //     steps {
//         //         script {
//         //             def modules = params.Module_Names.split(',')
//         //             modules.each { module ->
//         //                 module = module.trim()
//         //                 if (module) {
//         //                     sh """
//         //                         #!/bin/bash
//         //                         destinationDir="/HRMS/exportFiles"
//         //                         mkdir -p "\$destinationDir"
//         //                         rm -rf "\$destinationDir/${module}-*.zip"

//         //                         nexusUrl="https://rndnexus.progrec.com/repository/Module-Objects/${params.Customer}/${Nexus_repo_env}"
//         //                         fileUrl="\$nexusUrl/${module}/${params.Build_Version}/${module}-${params.Build_Version}.zip"
//         //                         destinationPath="\$destinationDir/${module}-${params.Build_Version}.zip"

//         //                         echo "Downloading \$fileUrl..."
//         //                         curl -o "\$destinationPath" "\$fileUrl"

//         //                         if [ -f "\$destinationPath" ]; then
//         //                             echo "File downloaded successfully to \$destinationPath"
//         //                         else
//         //                             echo "Failed to download file."
//         //                         fi
//         //                     """
//         //                 } else {
//         //                     echo "Module name is empty, skipping download."
//         //                 }
//         //             }
//         //         }
//         //     }
//         // }
//     }
// }
