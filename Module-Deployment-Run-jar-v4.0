//  The objective of this pipeline is to download the nexus package based on the inputs like Customer,Build_Version,Module and the instance.
// Created on:24-01-2025
// Updated on:24-01-2025
// Created By: Dhananjaya K L (Junior_DevOps_Engineer)
//  Install sshpass tool in the target instance where this pipeline is running so that the services can be executed remotely

@Library("jenkins-shared-library") _ // If this pipeline script is using the shared library concept then this command is must,

     // Define the method outside of the pipeline block so that label passed to the agent section
    def getAgentLabel(environment) {
    switch (environment.toLowerCase()) {
        case 'agent-container':
            return 'JENKINS-AGENT'
        case 'testing-container':
            return 'JENKINS-AGENT-SSH'
        case 'testing-dev':
            return 'TESTING-DEV'
        case 'testing-qa':
            return 'TESTING-QA'    
        default:
            error("Invalid environment specified: ${environment}")
    }
}

pipeline {
       
  parameters {
        // This section used to configure the input to the pipeline
        //note: the script for reactive input is provided in the Jenkins Console,  Ref link: https://github.com/ProGReC-APPS/jenkins-shared-library/tree/main/References
        // Plugin to be installed: Active Choice Plug-in
    choice(
        name: 'Environment',
        choices: ['agent-container', 'testing-container', 'Testing-Dev', 'Testing-QA'],
        description: 'Specify the environment: agent-container, testing-container, or redhat-VM'
    )

}

     agent {
        // Mention the the Jenkins agent label which is configuredi in the Jenkins console under nodes to execute this pipeline
        // Plugin to be installed: SSH Agent Plugin
        label getAgentLabel(params.Environment)
    }

    environment { // define timestamp in the env section so that same timestamp will be refereed throught the pipeline to avoid missmatches
        timestamp = new Date().format("dd-MM-yyyy_HH:mm:ss", TimeZone.getTimeZone('Asia/Kolkata'))
    }

    options {
        // This section will avoid cloning shared library repository to the target instance since the source files is being maintained in the other repository hence skipping the default checkout
        // Set the custom checkout directory
        skipDefaultCheckout(true)
    }

    stages {

        stage('Stop_service') {
            // This script will stop both the running node & java services.
            steps {
                script {
                    // Avoid failure by capturing the exit status of the shell script
                    def stopNodeStatus = sh(
                        script: """
                            echo "${params.Environment}"
                            echo "${env.timestamp}"
                            # Check for running node services
                            echo "Checking for running node processes..."
                            
                            # Find and kill node processes if they are running
                            NODE_PID=\$(pgrep -f node)
                            if [ -n "\$NODE_PID" ]; then
                                echo "Node process found with PID: \$NODE_PID, killing it."
                                kill -9 \$NODE_PID || echo "Failed to kill Node process, it might have already been stopped."
                                echo "Node service stopped successfully."
                            else
                                echo "No node service running."
                            fi
                        """,
                        returnStatus: true // Capture exit status
                    )

                    def stopJavaStatus = sh(
                        script: """
                            # Check for Java process running on port 8080
                            echo "Checking for Java process running on port 8080..."
                            JAVA_PID=\$(lsof -t -i:8080)

                            if [ -n "\$JAVA_PID" ]; then
                                echo "Java process found with PID: \$JAVA_PID running on port 8080, killing it."
                                kill -9 \$JAVA_PID || echo "Failed to kill Java process, it might have already been stopped."
                                echo "Java service stopped successfully."
                            else
                                echo "No Java service running on port 8080."
                            fi
                        """,
                        returnStatus: true // Capture exit status
                    )

                    // Ensure the stage passes regardless of whether processes are found or not
                    echo "Node stop status: ${stopNodeStatus}, Java stop status: ${stopJavaStatus}"
                    echo "ProGRec Application Stopped successfully."
                }
            }
        }


        stage('Run_Deployment') { // This stage will assing the IP &  the host details for the script to execute script 
        // this will trigger the deployment jar 
        // In this stage even though the deployment of the module is unsuccessful the stage will get completed so that deployment reports gets stored in the nexus repositroy
            steps {
                script {
                    switch (params.Environment) {
                        case 'agent-container':
                            Host_IP = '192.168.1.229'
                            Port = '24'
                            User_Name = 'root'
                            Password = 'root'                          
                            break
                        case 'testing-container':
                            Host_IP = '192.168.1.229'
                            Port = '4000'
                            User_Name = 'root'
                            Password = 'root'                          
                            break
                        case 'Testing-Dev':
                           Host_IP = '192.168.1.229'
                            Port = '27'
                            User_Name = 'root'
                            Password = 'root'                          
                            break
                        case 'Testing-QA':
                            Host_IP = '192.168.1.229'
                            Port = '28'
                            User_Name = 'root'
                            Password = 'root'                          
                            break                     
                                default:
                                    error "Unsupported SubModule parameter value: ${params.Environment}"
                    }
                    

                    // Start the Java application and redirect the output to a log file with a timestamp
                    
                    def result = sh(
                        script: """
                            #!/bin/bash
                            
                            # disable logging.
                            set +x

                            echo "Waiting for 2 seconds..."
                            sleep 2
                            
                            echo "timestamp: ${env.timestamp}"
                            
                            echo "Starting DeploymentMaintenence-1.0.jar"
                            mkdir -p Deployment_log
                            nohup sshpass -p '${Password}' ssh -o StrictHostKeyChecking=no -p ${Port} ${User_Name}@${Host_IP} 'nohup java -jar /HRMS/DeploymentMaintenence-1.0.jar > /HRMS/Deployment_log/deployment_${env.timestamp}.log 2>&1 &' &
                            
                            export APP_PID=\$!
                            echo "DeploymentMaintenence-1.0.jar started with PID: \$APP_PID"
                        """,
                        returnStdout: true
                    ).trim()

                    // Wait for a specific message in the log and display log contents in Jenkins dashboard
                    timeout(time: 10, unit: 'MINUTES') {
                        waitUntil {
                             def logFile = "/HRMS/Deployment_log/deployment_${env.timestamp}.log"  // stadnard script path
                           // def logFile = "/home/master/Progrec/Deployment_log/deployment_${env.timestamp}.log"
                            def logContent = readFile(logFile)
                            echo logContent // Display the log in Jenkins console output

                            if (logContent =~ /(?i)ALL THE MODULES IMPORTED SUCCESSFULLY/) {
                                echo 'ALL THE MODULES IMPORTED SUCCESSFULLY found in the log. Stopping the DeploymentMaintenence-1.0.jar...'

                                // Find the process by PID and kill it
                                sh """
                                set +x

                                if [ -n "\$APP_PID" ]; then
                                    echo "Killing process with PID: \$APP_PID"
                                    kill -9 \$APP_PID
                                else
                                    echo "No process found with the specified PID"
                                fi
                                """

                                echo 'Objects Import job finished, Please check the imports were successful'
                                currentBuild.result = 'SUCCESS'
                                return true
                            } else if (logContent =~ /ERROR:/) { //case sensitive
                            // } else if (logContent =~ /(?i)dhananjay/) { //case insensitivity
                                echo 'ERROR found in the log. Please check the application logs.'

                                // Optionally, kill the Java process if an error is detected
                                sh """
                                #!/bin/bash
                                set -x
                                # Check for Java process running on port 8080
                                    echo "Checking for Java process running on port 8080..."
                                    lsof -i :8080
                                    JAVA_PID=\$(lsof -t -i:8080)

                                    if [ -n "\$JAVA_PID" ]; then
                                        echo "Java process found with PID: \$JAVA_PID running on port 8080, killing it."
                                        kill -9 \$JAVA_PID || echo "Failed to kill Java process, it might have already been stopped."
                                        echo "Java service stopped successfully."
                                    else
                                        echo "No Java service running on port 8080."
                                    fi
                                    
                                """
                                // Mark the build as failure directly
                                    currentBuild.result = 'FAILURE'
                                return true
                            } else {
                                return false
                            }
                        }
                    }
                }  
        }
    }


stage('Report_Upload') { // This stage will uplaod the deployment_log & deployment report to the nexus repository,
// the script will check t
    steps {
        script {
            def Log_path = "/HRMS/Deployment_log/"  // standard path
            def Report_path = "/HRMS/deploymentReports/"  // standard path
            def Modulelist_file_path = "/HRMS/"
            def timestamp = env.timestamp  // ensure this is defined beforehand
            def time = new Date().format("dd-MM-yyyy", TimeZone.getTimeZone('Asia/Kolkata'))

            withCredentials([usernamePassword(credentialsId: 'Nexus', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                sh """
                    #!/bin/bash

                    set +x
                    echo "Timestamp: ${timestamp}"

                    # Upload the deployment log
                    curl -s -u "\${USERNAME}:\${PASSWORD}" \\
                        --upload-file "${Log_path}/deployment_${timestamp}.log" \\
                        "https://rndnexus.progrec.com/repository/Deployment-reports/Logs/${params.Environment}/${time}/deployment_${timestamp}.log"

                    # To write the modules to the txt file
                    grep "Generated HTML report for module:" "${Log_path}/deployment_${timestamp}.log" | tr -d '\\r' | sed -E 's/.*module: ([a-zA-Z0-9_-]+).*/\\1/' > "${Modulelist_file_path}/Modules.txt"
                    
                    if [ -s "${Modulelist_file_path}/Modules.txt" ]; then
                        while read -r module; do
                         module_path="${Report_path}/\${module}"

                    # Find all .html files and store them
                    REPORT_DIR="\$module_path"
                    FILES=\$(find "\$REPORT_DIR" -type f -name "*.html")

                    # Function to extract relevant fields from the filename
                    extract_date_time() {
                        local file="\$1"
                        # Extracting fields using regex to match dd-MM-yyyy_HH-mm
                        echo "\$file" | awk -F'[_-]' '{ 
                            # \$NF means Last field, \$NF-1 is the second last, etc.
                            printf "%s %s %s %s %s\\n", \$(NF-2), \$(NF-3), \$(NF-4), \$(NF-1), \$NF
                        }'
                    }

                    # Sort by descending order for yyyy, MM, dd, HH, mm
                    latest_file=\$(for file in \$FILES; do
                        # Extract date and time components
                        date_time=\$(extract_date_time "\$file")
                        # Combine for sorting YYYY MM DD HH MM based on above priority and include filename for easy sorting
                        echo "\$date_time \$file"
                    done | sort -nrk1,1 -k2,2nr -k3,3nr -k4,4nr -k5,5nr | head -n1 | awk '{print \$6}')

                    # Output the latest file
                    echo "Latest HTML Report for monitor: \$latest_file"

                            if [ -n "\${latest_file}" ]; then
                                echo "Uploading latest HTML report for module \${module}: \${latest_file}"
                                curl -s -u "\${USERNAME}:\${PASSWORD}" --upload-file "\${latest_file}" \\
                                    "https://rndnexus.progrec.com/repository/Deployment-reports/reports/${params.Environment}/\${module}/${time}/\$(basename \${latest_file})"
                            else
                                echo "No HTML report found for module: \${module}"
                            fi
                        done < "${Modulelist_file_path}/Modules.txt"
                    else
                        echo "No modules deployed. ${Modulelist_file_path}/Modules.txt is empty."
                    fi
                """
            }
        }
    }
}
}
post { // this Stage will post if the deployment is success or failure
        success {
            echo 'All modules deployed successfully. Build marked as SUCCESS.'
        }
        failure {
            echo 'All module deployment is not successful. Marking the build as FAILED.'
        }
    }
}
