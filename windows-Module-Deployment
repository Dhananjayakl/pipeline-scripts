@Library("jenkins-shared-library") _

pipeline {
    agent {
        label 'Agent-249'
    }

    options {
        // Set the custom checkout directory
        skipDefaultCheckout(true)
    }

    parameters {
        string(name: 'Build_Version', defaultValue: '1.0', description: 'Specify the version to build')
        extendedChoice(
            name: 'Module_Names',
            description: 'Modules to Deploy',
            type: 'PT_CHECKBOX',
            multiSelectDelimiter: ',',
            value: 'grc,issue,risk,controltesting,businessresilience,survey,admin,engine,attendance,documentmanagment,employee,incident,keyshield,leave,monitor,project,resolve,syscare,vendor,internalaudit,loss,crm,za'
        )
    }

    stages {
        stage('Workspace_Cleanup') {
            steps {
                script {
                    // Iterate over each selected module
                    def modules = params.Module_Names.split(',')
                    modules.each { module ->
                        dir("${module}") {
                            cleanWs()
                        }
                    }
                }
            }
        }

        stage('Stop_service') {
            steps {
                script {
                    bat """
                        @echo off
                        setlocal

                        REM Set BUILD_ID environment variable to avoid Jenkins killing the process
                        set BUILD_ID=dontKillMe

                        REM Trigger the scheduled task for Node.js
                        schtasks /run /tn "Client_Server-STOP"

                        echo "HRMS Application Stopped successfully."

                        REM End local environment block
                        endlocal

                        REM Exit script, Jenkins should now complete
                        exit /b 0
                    """
                }
            }
        }

        stage('Nexus_Download') {
            steps {
                script {
                    def modules = params.Module_Names.split(',')
                    modules.each { module ->
                        bat """
                            @echo off
                            REM Define the destination directory
                            set "destinationDir=D:/HRMS/exportFiles"

                            REM Check if the destination directory exists
                            if exist "%destinationDir%" (
                                echo Directory exists. Replacing all files and folders in %destinationDir%...
                                REM del /q /f "%destinationDir%\\*" >nul 2>&1
                                REM for /d %%p in ("%destinationDir%\\*") do rmdir "%%p" /s /q
                            ) else (
                                echo Directory does not exist. Creating the directory...
                                mkdir "%destinationDir%"
                            )

                            REM Define the Nexus repository URL and structure
                            set "nexusUrl=http://rndnexus.progrec.com/repository/Module-ProGReC-APPS"
                            set "fileUrl=%nexusUrl%/${module}/${module}-%Build_Version%.zip"

                            REM Define the destination path for the downloaded file
                            set "destinationPath=%destinationDir%/${module}-%Build_Version%.zip"

                            REM Download the file using PowerShell
                            echo Downloading %fileUrl%...
                            powershell -Command "Invoke-WebRequest -Uri '%fileUrl%' -OutFile '%destinationPath%'"

                            REM Check if the download was successful
                            if exist "%destinationPath%" (
                                echo File downloaded successfully to %destinationPath%
                            ) else (
                                echo Failed to download the file. Please check the module name and version.
                            )
                        """
                    }
                }
            }
        }

        stage('Run_Deployment') {
            steps {
                script {
                    def modules = params.Module_Names.split(',')
                    modules.each { module ->
                        // Start the Java application and redirect the output to a log file
                        def result = bat(
                            script: """
                                REM Wait for 60 seconds before executing this stage using ping command
                               echo Waiting for 60 seconds...
                               ping -n 11 127.0.0.1 > nulk

                                cd D:/HRMS/Startup_scripts
                                start /b java -jar DeploymentMaintenence-1.0.jar > deployment_${module}.log
                            """,
                            returnStdout: true
                        ).trim()

                        // Wait for a specific message in the log and display log contents in Jenkins dashboard
                        timeout(time: 10, unit: 'MINUTES') {
                            waitUntil {
                                def logContent = readFile("D:/HRMS/Startup_scripts/deployment_${module}.log")
                                echo logContent // This will display the log in the Jenkins console output

                                if (logContent =~ /(?i)dispatcherServlet/) {
                                    bat """
                                    REM Trigger the scheduled task for Node.js
                                    schtasks /run /tn "Client_Server-STOP"
                                    """
                                    echo 'Objects Import job finished, Please check the imports were successful'
                                    return true
                                } else {
                                    return false
                                }
                            }
                        }


                    
                        // Optionally, kill the Java process if it is still running
                        //bat 'taskkill /F /IM java.exe'
                    }
                }
            }
        }

        stage('Report_json') {
    steps {
        script {
            def jsonFilePath = "${pwd()}/report.json"
            def module = params.Module_Names
            def version = params.Build_Version
            def currentTime = new Date().format("dd-MM-yyyy'T'HH:mm:ss", TimeZone.getTimeZone('Asia/Kolkata'))
            def time = new Date().format("dd-MM-yyyy", TimeZone.getTimeZone('Asia/Kolkata'))
            def jsonContent = """
            {
                "Module_Name": "${module}",
                "Build_Version": "${version}",
                "Time": "${currentTime}"
            }
            """
            writeFile file: jsonFilePath, text: jsonContent

            // Use credentials to authenticate with Nexus repository
            withCredentials([usernamePassword(credentialsId: 'Nexus', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                bat """
                curl -u %USERNAME%:%PASSWORD% ^
                    --upload-file report.json ^
                    https://rndnexus.progrec.com/repository/Report_deployment/${time}/Report-${Module_Names}-${Build_Version}-${currentTime}.txt
                """
                echo "Module ${Module_Names}-report uploaded to Nexus repository."
            }
        }
    }
}
    }
}

