@Library("jenkins-shared-library") _


    // parameters {
    //     choice(
    //         name: 'Module_Names',
    //         description: 'Modules to Deploy',
    //         type: 'PT_CHECKBOX',
    //         multiSelectDelimiter: ',',
    //         value: 'grc,issue,risk,controltesting,businessresilience,survey,admin,engine,attendance,documentmanagment,employee,incident,keyshield,leave,monitor,project,resolve,syscare,vendor,internalaudit,loss,crm,za'    
    //     )
    //     // choice(
    //     //     name: 'Environment',
    //     //     choices: ['dev', 'qa', 'staging'],
    //     //     description: 'Specify the environment: dev, qa, or staging'
    //     // )  
    // }

     // Define the method outside of the pipeline block
    def getAgentLabel(environment) {
    switch (environment.toLowerCase()) {
        case 'agent-container-stagging':
            return 'JENKINS-AGENT'
        case 'testing-container-qa':
            return 'JENKINS-AGENT-SSH'
        case 'testing-dev':
            return 'TESTING-DEV'
        case 'testing-qa':
            return 'TESTING-QA'            
        default:
            error("Invalid environment specified: ${environment}")
    }
}

pipeline {

  parameters {
    choice(name: 'Customer', choices: ['Progrec-APPS', 'AEON-Credit'], description: 'Select the target customer')
    string(name: 'Build_Version', defaultValue: '1.0', description: 'Specify the version to build')
    // choice( //make this env reactive since env is not same for both progrec app & other customer
    //     name: 'Environment',
    //     choices: ['Agent-Container-Stagging', 'Testing-Container-QA', 'Redhat-VM', 'Dev', 'PreSales', 'Sales'],
    //     description: 'Specify the environment: dev, qa, or staging'
    // )

}

     agent {
        label getAgentLabel(params.Environment)
    }

    options {
        // Set the custom checkout directory
        skipDefaultCheckout(true)
    }

    stages {
        // stage('Workspace_Cleanup') {
        //     steps {
        //         script {
        //             // Iterate over each selected module
        //             def modules = params.Module.split(',')
        //             modules.each { module ->
        //                 dir("${module}") {
        //                     cleanWs()
        //                 }
        //             }
        //         }
        //     }
        // }

        // stage('Stop_service') {
        //     steps {
        //         script {
        //             // Avoid failure by capturing the exit status of the shell script
        //             def stopNodeStatus = sh(
        //                 script: """
        //                     # Check for running node services
        //                     echo "Checking for running node processes..."
                            
        //                     # Find and kill node processes if they are running
        //                     NODE_PID=\$(pgrep -f node)
        //                     if [ -n "\$NODE_PID" ]; then
        //                         echo "Node process found with PID: \$NODE_PID, killing it."
        //                         kill -9 \$NODE_PID || echo "Failed to kill Node process, it might have already been stopped."
        //                         echo "Node service stopped successfully."
        //                     else
        //                         echo "No node service running."
        //                     fi
        //                 """,
        //                 returnStatus: true // Capture exit status
        //             )

        //             def stopJavaStatus = sh(
        //                 script: """
        //                     # Check for Java process running on port 8080
        //                     echo "Checking for Java process running on port 8080..."
        //                     JAVA_PID=\$(lsof -t -i:8080)

        //                     if [ -n "\$JAVA_PID" ]; then
        //                         echo "Java process found with PID: \$JAVA_PID running on port 8080, killing it."
        //                         kill -9 \$JAVA_PID || echo "Failed to kill Java process, it might have already been stopped."
        //                         echo "Java service stopped successfully."
        //                     else
        //                         echo "No Java service running on port 8080."
        //                     fi
        //                 """,
        //                 returnStatus: true // Capture exit status
        //             )

        //             // Ensure the stage passes regardless of whether processes are found or not
        //             echo "Node stop status: ${stopNodeStatus}, Java stop status: ${stopJavaStatus}"
        //             echo "ProGRec Application Stopped successfully."
        //         }
        //     }
        // }

        stage('Assign_Env') {
            steps {
                script {

                    switch (params.Customer) {
                        case 'Progrec-APPS':
                            switch (params.Environment) {
                                case 'Agent-Container-Stagging':
                                    Nexus_repo_env = "Stagging"
                                    break
                                case 'Testing-Container-QA':
                                    Nexus_repo_env = "QA"
                                    break
                                case 'Testing-Dev':
                                    Nexus_repo_env = "Testing-Dev"
                                    break
                                case 'Testing-QA':
                                    Nexus_repo_env = "Testing-QA"
                                    break        
                                default:
                                    error "Unsupported Environment for Progrec-APPS: ${params.Environment}"
                            }
                            break
                        case 'AEON-Credit':
                             switch (params.Environment) {
                                case 'Agent-Container-Stagging':
                                    Nexus_repo_env = "Stagging"
                                    break
                                case 'Testing-Container-QA':
                                    Nexus_repo_env = "QA"
                                    break
                                case 'Testing-Dev':
                                    Nexus_repo_env = "Dev"
                                    break
                                case 'Testing-QA':
                                    Nexus_repo_env = "QA"
                                    break
                                default:
                                    error "Unsupported Environment for AEON-Credit: ${params.Environment}"
                            }
                            break
                        default:
                            error "Unsupported Customer: ${params.Customer}"
                    }
                    echo "Assigned Nexus_repo_env: ${Nexus_repo_env}"
                }
            }
        }

        stage('Check_if_package_exists_Nexus') {
            steps {
                script{
                withCredentials([usernamePassword(credentialsId: 'Nexus', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                def modules = params.Module_Names.split(',')
                    modules.each { module ->
                        // Trim whitespace from module name
                        module = module.trim()
                        echo "Processing module: ${module}"

                        // Check if the module is not empty
                        if (module) {    
                    sh """
                        #!/bin/bash
                        set +x 
                        NEXUS_URL="https://rndnexus.progrec.com"
                        REPO="Module-Objects"
                        PACKAGE_NAME="${params.Customer}/${Nexus_repo_env}/${module}/${params.Build_Version}/${module}-${params.Build_Version}.zip"
                        echo "\$PACKAGE_NAME"
                        
                        EXISTING_PACKAGE=\$(curl -s -u \$USERNAME:\$PASSWORD \\
                            "\$NEXUS_URL/service/rest/v1/search/assets?repository=\$REPO&q=\$PACKAGE_NAME" | \\
                            jq '.items[] | select(.path | contains("'"\$PACKAGE_NAME"'"))')
                        
                        if [ -n "\$EXISTING_PACKAGE" ]; then
                            echo "Package \$PACKAGE_NAME exists in Nexus. Continue Download the package."
                            exit 0
                        else
                            echo "Package \$PACKAGE_NAME does not exist."
                            echo "Exact package does not exist in Nexus.please recheck the input or nexus repository"
                            exit 1
                        fi
                    """
                } else {
                            echo "Module name is not matching, skipping download."
                        }
            }
            }
            }
            }
        }


        stage('Nexus_Download') {
            steps {
                script {
                       sh """
                            #!/bin/bash
                            # Define the destination directory
                            destinationDir="/HRMS/exportFiles" #stadnard path
                            # destinationDir="/home/master/Progrec/exportFiles"

                            # Check if the destination directory exists
                            if [ -d "\$destinationDir" ]; then
                                echo "Directory exists. Replacing existing modules in target isntance with the new module package \$destinationDir..."
                                
                                # Remove all files and folders except deploymentscripts.zip
                               #find "\$destinationDir" -mindepth 1 ! -name 'deploymentscripts.zip' -exec rm -rf {} +
                                ls
                            else
                                echo "Directory does not exist. Creating the directory..."
                                mkdir -p "\$destinationDir"
                            fi
                        """
                    def modules = params.Module_Names.split(',')
                    modules.each { module ->
                        // Trim whitespace from module name
                        module = module.trim()
                        echo "Processing module: ${module}"

                        // Check if the module is not empty
                        if (module) {
                            sh """
                                #!/bin/bash
                                # Define the destination directory
                                  destinationDir="/HRMS/exportFiles" #stadnard path
                                # destinationDir="/home/master/Progrec/exportFiles"

                                #Delete existing modules fromthe export fodler in target location
                                rm -rf \${destinationDir}/${module}-*.zip

                                # Define the Nexus repository URL and structure
                                nexusUrl="https://rndnexus.progrec.com/repository/Module-Objects/${params.Customer}/${Nexus_repo_env}"
                                fileUrl="\$nexusUrl/${module}/${Build_Version}/${module}-\$Build_Version.zip"

                                # Define the destination path for the downloaded file
                                destinationPath="\$destinationDir/${module}-\$Build_Version.zip"

                                # Download the file using curl
                                echo "Downloading \$fileUrl..."
                                curl -o "\$destinationPath" "\$fileUrl"

                                # Check if the download was successful
                                if [ -f "\$destinationPath" ]; then
                                    echo "File downloaded successfully to \$destinationPath"
                                else
                                    echo "Failed to download the file. Please check the module name and version."
                                fi
                            """
                        } else {
                            echo "Module name is empty, skipping download."
                        }
                    }
                }
            }
        }

        // stage('Run_Deployment') {
        //     steps {
        //         script {
        //             // Get the current timestamp
        //             def timestamp = sh(script: "date +'%Y-%m-%d_%H-%M'", returnStdout: true).trim()

        //             // Start the Java application and redirect the output to a log file with a timestamp
        //             def result = sh(
        //                 script: """
        //                     echo "Waiting for 5 seconds..."
        //                     sleep 5
 
        //                     # cd /HRMS/  # standard path
        //                     cd /home/master/Progrec/
        //                     echo pwd
        //                     ls
        //                     echo "Starting DeploymentMaintenence-1.0.jar"
        //                     mkdir -p Deployment_log
        //                     # nohup java -jar DeploymentMaintenence-1.0.jar > /HRMS/Deployment_log/deployment_${timestamp}.log 2>&1 & #standard script
        //                     nohup java -jar DeploymentMaintenence-1.0.jar > /home/master/Progrec/Deployment_log/deployment_${timestamp}.log 2>&1 &
        //                     export APP_PID=\$!
        //                     echo "DeploymentMaintenence-1.0.jar started with PID: \$APP_PID"
        //                 """,
        //                 returnStdout: true
        //             ).trim()

        //             // Wait for a specific message in the log and display log contents in Jenkins dashboard
        //             timeout(time: 10, unit: 'MINUTES') {
        //                 waitUntil {
        //                     // def logFile = "/HRMS/Deployment_log/deployment_${timestamp}.log"  // stadnard script path
        //                     def logFile = "/home/master/Progrec/Deployment_log/deployment_${timestamp}.log"
        //                     def logContent = readFile(logFile)
        //                     echo logContent // Display the log in Jenkins console output

        //                     if (logContent =~ /(?i)ALL THE MODULES IMPORTED SUCCESSFULLY/) {
        //                         echo 'ALL THE MODULES IMPORTED SUCCESSFULLY found in the log. Stopping the DeploymentMaintenence-1.0.jar...'

        //                         // Find the process by PID and kill it
        //                         sh """
        //                         if [ -n "\$APP_PID" ]; then
        //                             echo "Killing process with PID: \$APP_PID"
        //                             kill -9 \$APP_PID
        //                         else
        //                             echo "No process found with the specified PID"
        //                         fi
        //                         """

        //                         echo 'Objects Import job finished, Please check the imports were successful'
        //                         return true
        //                     } else if (logContent =~ /(?i)ERROR/) {
        //                         echo 'ERROR found in the log. Please check the application logs.'

        //                         // Optionally, kill the Java process if an error is detected
        //                         // sh """
        //                         // if [ -n "\$APP_PID" ]; then
        //                         //     echo "Killing process with PID: \$APP_PID due to error"
        //                         //     kill -9 \$APP_PID
        //                         // else
        //                         //     echo "No process found with the specified PID"
        //                         // fi
        //                         // """

        //                         error 'Deployment failed due to an error in the application'
        //                         return false
        //                     } else {
        //                         return false
        //                     }
        //                 }
        //             }

        //     // Optionally, kill the Java process if it is still running after the timeout
        //     // sh 'pkill -f DeploymentMaintenence-1.0.jar'
        //         }
        //     }
        // }

    //     stage('Report_Upload') {
    // steps {
        // script {
            // def jsonFilePath = "${pwd()}/report.json"
            // def module = params.Module_Names
            // def version = params.Build_Version
            // def currentTime = new Date().format("dd-MM-yyyy'T'HH:mm:ss", TimeZone.getTimeZone('Asia/Kolkata'))
            // def time = new Date().format("dd-MM-yyyy", TimeZone.getTimeZone('Asia/Kolkata'))
            // def jsonContent = """
            // {
            //     "Module_Name": "${module}",
            //     "Build_Version": "${version}",
            //     "Time": "${currentTime}"
            // }
            // """
            // writeFile file: jsonFilePath, text: jsonContent

            // Use credentials to authenticate with Nexus repository
        //     withCredentials([usernamePassword(credentialsId: 'Nexus', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
        //         bat """
        //         curl -u %USERNAME%:%PASSWORD% ^
        //             --upload-file report.json ^
        //             http://192.168.1.229:8082/repository/Deployment-reports/${time}/Report-${Module_Names}-${Build_Version}-${currentTime}.txt
        //         """
        //         echo "Module ${Module_Names}-report uploaded to Nexus repository."
        //     }
        // }
    // script { // this script is working to uplaod the diployment log
    //     //    def  Report_path = "/HRMS/Deployment_log/"  // standard path 
    //        def  Report_path = "/home/master/Progrec/Deployment_log/"
    //        def timestamp = sh(script: "date +'%Y-%m-%d_%H-%M'", returnStdout: true).trim()
    //        def time = new Date().format("dd-MM-yyyy", TimeZone.getTimeZone('Asia/Kolkata'))
    //         dir("${params.Module_Name}") {
    //             withCredentials([usernamePassword(credentialsId: 'Nexus', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
    //                 // Use environment variables instead of direct interpolation
    //                 sh """
    //                     curl -u "\$USERNAME:\$PASSWORD" --upload-file "${Report_path}/deployment_${timestamp}.log" "http://192.168.1.229:8082/repository/Deployment-reports/${time}/deployment_${timestamp}.log"
    //                 """
    //                      }
    //                 }
    //             }    
        //     }
        // }
    }
}
