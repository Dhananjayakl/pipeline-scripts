//  The objective of this pipeline is to start the node & the java services based on type of instance.
// Created on:24-01-2025
// Updated on:24-01-2025
// Created By: Dhananjaya K L (Junior_DevOps_Engineer)
// The sshpass tool in the target instance should be pre installed
@Library("jenkins-shared-library") _ // IF this pipeline script is using the shared library concept then this command is must, 

     // Define the method outside of the pipeline block
    def getAgentLabel(instance) {
    switch (instance.toLowerCase()) {
        case 'Specify the environment: agent-container':
            return 'JENKINS-AGENT'
        case 'testing-container':
             return 'JENKINS-AGENT-SSH'
        case 'testing-dev':
             return 'TESTING-DEV'
         case 'testing-qa':
             return 'TESTING-QA'
        // case 'staging':  // Corrected the spelling of 'staging'
        //     return 'JENKINS-MASTER'
        default:
            error("Invalid environment specified: ${instance}")
    }
}

pipeline {

  parameters {
        // This section used to configure the input to the pipeline
        // Plugin to be installed: Active Choice Plug-in
    choice(
        name: 'Instance',
        choices: ['agent-container', 'testing-container', 'Testing-Dev' , 'Testing-QA'],
        description: 'Specify the environment: agent-container,testing-container'
    )

}

     agent {
        // Mention the the Jenkins agent label which is configuredi nthe Jenkins console under nodes to execute this pipeline
        // Plugin to be installed: SSH Agent Plugin
        label getAgentLabel(params.Instance)
    }

    options {
        // Set the custom checkout directory
        skipDefaultCheckout(true)
    }

    stages { // This stage will assign the workspace variable to the selected label with all the host details
        stage('Workspace_Setup') { 

            steps {
                script {
                    // Determine which repository URL to use based on Project parameter
                    switch (params.Instance) {
                        case 'agent-container':
                            Host_IP = '192.168.1.229'
                            Port = '24'
                            User_Name = 'root'
                            Password = 'root'                          
                            break
                        case 'testing-container':
                            Host_IP = '192.168.1.229'
                            Port = '4000'
                            User_Name = 'root'
                            Password = 'root'                          
                            break
                        case 'Testing-Dev':
                           Host_IP = '192.168.1.229'
                            Port = '27'
                            User_Name = 'root'
                            Password = 'root'                          
                            break
                        case 'Testing-QA':
                            Host_IP = '192.168.1.229'
                            Port = '28'
                            User_Name = 'root'
                            Password = 'root'                          
                            break                     
                                default:
                                    error "Unsupported SubModule parameter value: ${params.Environment}"
                            }
                    }
                    
                }
            }

            stage('Start_Service') { // This script will execute, start service command for both the server & client using the sshpass tool which should be installed in the respective machine.
                steps {
                    script {
                        sh """
                        set +x

                        # Start HRMS Server using nohup with sshpass
                        nohup sshpass -p '${Password}' ssh -o StrictHostKeyChecking=no -p ${Port} ${User_Name}@${Host_IP} 'nohup java -jar /HRMS/SERVER.jar > /HRMS/Server.log 2>&1 &' &

                        # Start HRMS Client using nohup with sshpass
                        nohup sshpass -p '${Password}' ssh -o StrictHostKeyChecking=no -p ${Port} ${User_Name}@${Host_IP} 'cd /HRMS/Client && nohup npm start -- --host > /HRMS/Client.log 2>&1 &' &

                        echo "started Server......"
                        echo "Started Client......"
                        """
                    }
                }
            }
        }
    }
 
   


